import telebot
import psycopg2
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from config import host, user, password, database
import logging

logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger('telethon')

# Telegram Bot Token
TOKEN = '7853003755:AAEE6Nh6_dZg_Izze1-UscLI8-CnAd6r5k8'

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
bot = telebot.TeleBot(TOKEN)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_auth_status = {}

# –ü–∞—Ä–æ–ª—å –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
idadmin = 1075470938



# –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
class Database:
    def __init__(self, host, user, password, database):
        """ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö """
        self.connection = psycopg2.connect(
            host=host,
            user=user,
            password=password,
            database=database
            
        )
        self.cursor = self.connection.cursor()

    def fetch_all_products(self):
        """ –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ —Ç–∞–±–ª–∏—Ü—ã """
        self.cursor.execute("SELECT id, title, is_active FROM —Ç–∞–±–ª–∏—Ü–∞101")
        return self.cursor.fetchall()

    def update_product_status(self, product_id, is_active):
        """ –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–∞ –ø–æ ID """
        self.cursor.execute("""
            UPDATE —Ç–∞–±–ª–∏—Ü–∞101
            SET is_active = %s
            WHERE id = %s
            RETURNING id, title, is_active;
        """, (is_active, product_id))
        updated_product = self.cursor.fetchone()
        self.connection.commit()
        return updated_product

    def close(self):
        """ –ó–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö """
        self.cursor.close()
        self.connection.close()


# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = Database(host, user, password, database)


# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏
def main_menu():
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("üì¶ –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä—ã", callback_data="show_products"))
    return markup


# –ö–Ω–æ–ø–∫–∞ "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
def back_to_menu():
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="main_menu"))
    return markup


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def start(message):
    if message.chat.id != idadmin:
        bot.send_message(message.chat.id, "‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        return

    bot.send_message(message.chat.id, "üëã –ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu())

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å" / "–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å"
@bot.callback_query_handler(func=lambda call: call.data == "show_products")
def show_products(call):
    if call.message.chat.id != idadmin:
        bot.send_message(call.message.chat.id, "‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        return

    products = db.fetch_all_products()

    if not products:
        bot.send_message(call.message.chat.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤.", reply_markup=back_to_menu())
        return

    for product in products:
        product_id, title, is_active = product
        status_text = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if is_active else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
        markup = InlineKeyboardMarkup()
        if is_active:
            markup.add(InlineKeyboardButton("‚ùå –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"toggle_{product_id}_0"))
        else:
            markup.add(InlineKeyboardButton("‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"toggle_{product_id}_1"))

        bot.send_message(call.message.chat.id, f"üÜî ID: {product_id}\nüì¶ –¢–æ–≤–∞—Ä: {title}\nüìå –°—Ç–∞—Ç—É—Å: {status_text}",
                         reply_markup=markup)

    bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:", reply_markup=back_to_menu())


@bot.callback_query_handler(func=lambda call: call.data.startswith("toggle_"))
def toggle_status(call):
    if call.message.chat.id != idadmin:
        bot.send_message(call.message.chat.id, "‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        return

    _, product_id, new_status = call.data.split("_")
    product_id = int(product_id)
    is_active = bool(int(new_status))

    updated_product = db.update_product_status(product_id, is_active)

    if updated_product:
        prod_id, title, new_status = updated_product
        status_text = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if new_status else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
        bot.edit_message_text(f"üÜî ID: {prod_id}\nüì¶ –¢–æ–≤–∞—Ä: {title}\nüìå –°—Ç–∞—Ç—É—Å: {status_text}",
                              chat_id=call.message.chat.id,
                              message_id=call.message.message_id,
                              reply_markup=None)
        bot.answer_callback_query(call.id, "–°—Ç–∞—Ç—É—Å —Ç–æ–≤–∞—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω! ‚úÖ")
    else:
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞! –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
@bot.callback_query_handler(func=lambda call: call.data == "main_menu")
def go_main_menu(call):
    if call.message.chat.id != idadmin:
        bot.send_message(call.message.chat.id, "‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        return

    bot.send_message(call.message.chat.id, "üîù –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.polling()